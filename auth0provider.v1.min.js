function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import createAuth0Client from "@auth0/auth0-spa-js";
import { EventEmitter } from "./EventEmitter";
/** Define a default action to perform after authentication */

var DEFAULT_REDIRECT_CALLBACK = function DEFAULT_REDIRECT_CALLBACK() {
  return window.history.replaceState({}, document.title, window.location.pathname);
};
/**
 @type {AuthPlugin}
 */


var instance;

var AuthPlugin = /*#__PURE__*/function (_EventEmitter) {
  _inherits(AuthPlugin, _EventEmitter);

  var _super = _createSuper(AuthPlugin);

  function AuthPlugin() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AuthPlugin);

    if (instance) {
      return _possibleConstructorReturn(_this, instance);
    }

    _this = _super.call(this);
    instance = _assertThisInitialized(_this);
    _this.AUTH_EVENTS = {
      LOADING: "LOADING",
      LOADED: "LOADED",
      AUTHENTICATED: "AUTHENTICATED"
    };
    _this.options = options;
    _this.options.onRedirectCallback = _this.options.onRedirectCallback || DEFAULT_REDIRECT_CALLBACK;
    _this.loading = true;
    _this.isAuthenticated = false;
    _this.user = {};
    _this.userInfo = {};
    _this.identity = {};
    _this.bearer = "";
    _this.auth0Client = null;
    _this.popupOpen = false;
    _this.error = null;

    _this.created(options);

    return _possibleConstructorReturn(_this, instance);
  }
  /** Authenticates the user using a popup window */


  _createClass(AuthPlugin, [{
    key: "loginWithPopup",
    value: function () {
      var _loginWithPopup = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var o,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                o = _args.length > 0 && _args[0] !== undefined ? _args[0] : {
                  returnTo: window.location.origin
                };
                this.popupOpen = true;
                _context.prev = 2;
                _context.next = 5;
                return this.auth0Client.loginWithPopup(o);

              case 5:
                _context.next = 7;
                return this.auth0Client.getUser();

              case 7:
                this.user = _context.sent;
                _context.next = 10;
                return this.getUserData();

              case 10:
                this.isAuthenticated = true;
                _context.next = 16;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](2);
                // eslint-disable-next-line
                console.error(_context.t0);

              case 16:
                _context.prev = 16;
                this.popupOpen = false;
                return _context.finish(16);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 13, 16, 19]]);
      }));

      function loginWithPopup() {
        return _loginWithPopup.apply(this, arguments);
      }

      return loginWithPopup;
    }()
    /** Handles the callback when logging in using a redirect */

  }, {
    key: "handleRedirectCallback",
    value: function () {
      var _handleRedirectCallback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.loading = true;
                _context2.prev = 1;
                _context2.next = 4;
                return this.auth0Client.handleRedirectCallback();

              case 4:
                _context2.next = 6;
                return this.auth0Client.getUser();

              case 6:
                this.user = _context2.sent;
                _context2.next = 9;
                return this.getUserData();

              case 9:
                this.isAuthenticated = true;
                _context2.next = 15;
                break;

              case 12:
                _context2.prev = 12;
                _context2.t0 = _context2["catch"](1);
                this.error = _context2.t0;

              case 15:
                _context2.prev = 15;
                this.loading = false;
                return _context2.finish(15);

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 12, 15, 18]]);
      }));

      function handleRedirectCallback() {
        return _handleRedirectCallback.apply(this, arguments);
      }

      return handleRedirectCallback;
    }()
    /** Authenticates the user using the redirect method */

  }, {
    key: "loginWithRedirect",
    value: function loginWithRedirect() {
      var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        returnTo: window.location.href
      };
      return this.auth0Client.loginWithRedirect(o);
    }
    /**
     * Returns all the claims present in the ID token
     * @param {import("@auth0/auth0-spa-js").GetIdTokenClaimsOptions} o
     */

  }, {
    key: "getIdTokenClaims",
    value: function getIdTokenClaims(o) {
      return this.auth0Client.getIdTokenClaims(o);
    }
    /**
     * Returns the access token. If the token is invalid or missing, a new one is retrieved
     * @param {import("@auth0/auth0-spa-js").GetTokenSilentlyOptions} [o]
     */

  }, {
    key: "getTokenSilently",
    value: function getTokenSilently(o) {
      return this.auth0Client.getTokenSilently(o);
    }
    /**
     * @param {string[] | string} permissions
     */

  }, {
    key: "hasPermissions",
    value: function hasPermissions(permissions) {
      var _this2 = this;

      if (!Array.isArray(permissions)) {
        permissions = [permissions];
      }

      if (!this.identity.permissions) {
        return false;
      }

      var _loop = function _loop() {
        var next = permissions.pop();

        var
        /**
        * @param {any} p
        */
        found = _this2.identity.permissions.find(function (p) {
          return p == next;
        });

        if (!found) {
          return {
            v: false
          };
        }
      };

      while (permissions.length) {
        var _ret = _loop();

        if (_typeof(_ret) === "object") return _ret.v;
      }

      return true;
    }
    /**
     * @param {string[] | string} roles
     */

  }, {
    key: "hasRoles",
    value: function hasRoles(roles) {
      var _this3 = this;

      if (!Array.isArray(roles)) {
        roles = [roles];
      }

      if (!this.userInfo.roles) {
        return false;
      }

      var _loop2 = function _loop2() {
        var next = roles.pop();

        var
        /**
        * @param {any} r
        */
        found = _this3.userInfo.roles.find(function (r) {
          return r == next;
        });

        if (!found) {
          return {
            v: false
          };
        }
      };

      while (roles.length) {
        var _ret2 = _loop2();

        if (_typeof(_ret2) === "object") return _ret2.v;
      }

      return true;
    }
    /**
     * @param {string} token
     */

  }, {
    key: "getIdentityClaims",
    value: function () {
      var _getIdentityClaims = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(token) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.identity = JSON.parse(decodeToken(token));
                return _context3.abrupt("return", this.identity);

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getIdentityClaims(_x) {
        return _getIdentityClaims.apply(this, arguments);
      }

      return getIdentityClaims;
    }()
    /**
     * Gets the access token using a popup window
     * @param {import("@auth0/auth0-spa-js").GetTokenWithPopupOptions} o
     */

  }, {
    key: "getTokenWithPopup",
    value: function getTokenWithPopup(o) {
      return this.auth0Client.getTokenWithPopup(o);
    }
  }, {
    key: "getUserData",
    value: function () {
      var _getUserData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var token, identity, res, userData, key, keep;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                this.auth0Client;
                _context4.next = 4;
                return this.getTokenSilently();

              case 4:
                token = _context4.sent;
                _context4.next = 7;
                return this.getIdentityClaims(token);

              case 7:
                identity = _context4.sent;
                this.bearer = "Bearer " + token;
                _context4.next = 11;
                return fetch("https://".concat(this.options.domain, "/userinfo"), {
                  headers: {
                    authorization: this.bearer
                  }
                });

              case 11:
                res = _context4.sent;
                _context4.next = 14;
                return res.json();

              case 14:
                userData = _context4.sent;

                for (key in userData) {
                  keep = key;

                  if (key.includes("https")) {
                    keep = keep.slice(keep.lastIndexOf("/") + 1);
                  }

                  this.userInfo[keep] = userData[key];
                }

                this.user.isAuthenticated = true;
                this.emit(this.AUTH_EVENTS.AUTHENTICATED, this);
                _context4.next = 23;
                break;

              case 20:
                _context4.prev = 20;
                _context4.t0 = _context4["catch"](0);
                console.error(_context4.t0);

              case 23:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 20]]);
      }));

      function getUserData() {
        return _getUserData.apply(this, arguments);
      }

      return getUserData;
    }()
    /** Logs the user out and removes their session on the authorization server */

  }, {
    key: "logout",
    value: function logout() {
      var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        returnTo: window.location.origin
      };
      var logout = this.auth0Client.logout(o);
      this.bearer = "";
      this.user = {};
      this.userInfo = {};
      this.identity = {};
      this.isAuthenticated = false;
      return logout;
    }
    /**
     * Use this lifecycle method to instantiate the SDK client
     * @param {{ domain?: any; clientId?: any; audience?: any; redirectUri?: any; onRedirectCallback?: any; }} options
     */

  }, {
    key: "created",
    value: function () {
      var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(options) {
        var _yield$this$auth0Clie, appState;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.emit(this.AUTH_EVENTS.LOADING); // Create a new instance of the SDK client using members of the given options object

                _context5.next = 3;
                return createAuth0Client({
                  domain: options.domain,
                  client_id: options.clientId,
                  audience: options.audience,
                  redirect_uri: options.redirectUri
                });

              case 3:
                this.auth0Client = _context5.sent;
                _context5.prev = 4;

                if (!(window.location.search.includes("code=") && window.location.search.includes("state="))) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 8;
                return this.auth0Client.handleRedirectCallback();

              case 8:
                _yield$this$auth0Clie = _context5.sent;
                appState = _yield$this$auth0Clie.appState;
                // Notify subscribers that the redirect callback has happened, passing the appState
                // (useful for retrieving any pre-authentication state)
                options.onRedirectCallback(appState);

              case 11:
                _context5.next = 16;
                break;

              case 13:
                _context5.prev = 13;
                _context5.t0 = _context5["catch"](4);
                this.error = _context5.t0;

              case 16:
                _context5.prev = 16;
                _context5.next = 19;
                return this.auth0Client.isAuthenticated();

              case 19:
                this.isAuthenticated = _context5.sent;
                _context5.next = 22;
                return this.auth0Client.getUser();

              case 22:
                this.user = _context5.sent;
                _context5.next = 25;
                return this.getUserData();

              case 25:
                this.loading = false;
                this.emit(this.AUTH_EVENTS.LOADED);
                return _context5.finish(16);

              case 28:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[4, 13, 16, 28]]);
      }));

      function created(_x2) {
        return _created.apply(this, arguments);
      }

      return created;
    }()
  }]);

  return AuthPlugin;
}(EventEmitter);
/**
 * @param {{ onRedirectCallback: () => void; domain: string, audience: string, clientId: string  }} options
 */


export function initializeAuth(options) {
  return new AuthPlugin(options);
}

var _auth = function _auth() {
  if (!instance) {
    throw new Error("Auth Plugin must be initialized prior to importing $auth");
  }

  ;
  return instance;
};
/**
 * @param {{ fullPath: any; }} to
 * @param {any} from
 * @param {() => any} next
 */


export function authGuard(_x3, _x4, _x5) {
  return _authGuard.apply(this, arguments);
}
/**
 * Promise resolves if able to authenticate
 * @param {function} [cb]
 */

function _authGuard() {
  _authGuard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(to, from, next) {
    var authService;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            authService = _auth();
            _context6.next = 4;
            return onAuthLoaded();

          case 4:
            if (!authService.isAuthenticated) {
              _context6.next = 6;
              break;
            }

            return _context6.abrupt("return", next());

          case 6:
            return _context6.abrupt("return", instance.loginWithRedirect({
              returnTo: to.fullPath
            }));

          case 9:
            _context6.prev = 9;
            _context6.t0 = _context6["catch"](0);
            return _context6.abrupt("return", instance.loginWithRedirect({
              returnTo: to.fullPath
            }));

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[0, 9]]);
  }));
  return _authGuard.apply(this, arguments);
}

export var onAuthLoaded = function onAuthLoaded(cb) {
  return new Promise(function (resolve, reject) {
    var authService = _auth();

    if (!authService.loading) {
      if (typeof cb == 'function') {
        cb(authService);
      }

      return resolve(authService);
    }

    authService.on(authService.AUTH_EVENTS.LOADED, function () {
      resolve(authService);

      if (typeof cb == 'function') {
        cb(authService);
      }
    });
  });
};

function b64DecodeUnicode() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".";

  try {
    return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {
      var code = p.charCodeAt(0).toString(16).toUpperCase();

      if (code.length < 2) {
        code = "0" + code;
      }

      return "%" + code;
    }));
  } catch (e) {
    return "";
  }
}

function decodeToken() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".";

  try {
    str = str.split(".")[1];
    var output = str.replace(/-/g, "+").replace(/_/g, "/");

    switch (output.length % 4) {
      case 0:
        break;

      case 2:
        output += "==";
        break;

      case 3:
        output += "=";
        break;

      default:
        throw "Illegal base64url string!";
    }

    return b64DecodeUnicode(output);
  } catch (err) {
    return atob(output);
  }
}
